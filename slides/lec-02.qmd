---
title: Introduction to ML Systems Design
subtitle: Lecture 2
author: Jan Kirenz
format:
  revealjs:
    theme: default
    transition: fade
    slide-number: true
    chalkboard:
      buttons: false
    preview-links: auto
    logo: images/logo.png
    css: slides.scss
    footer: MLOps | Jan Kirenz
    incremental: true 
#jupyter: python3
---


# Business and ML Objectives {background-color="#0ca37f"}


## Business and ML Objectives

- Goal of any project is to increase profits

  - **Directly**: Increasing sales and cutting costs

  - **Indirectly**: e.g., higher customer satisfaction and increasing traffic on a website

- Tie the performance of an ML system to the overall business performance


## E Commerce example

- E commerce site that cares about purchase-through rate

- You want to move your recommender system from batch prediction to online prediction



::: {.notes}
E commerce site that cares about purchase-through rate and you want to move your recommender system from batch prediction to online prediction. You might reason that online prediction will enable recommendations
more relevant to users right now, which can lead to a higher purchase-through rate.
You can even do an experiment to show that online prediction can improve your
recommender system’s predictive accuracy by X% and, historically on your site, each
percent increase in the recommender system’s predictive accuracy led to a certain
increase in purchase-through rate.
:::

## Netflix Recommender example

- Business metric: subscription cancellation rate

- Metric: Total streaming hours

- Netflix measures the performance of their recommender system using take-rate: the number of quality plays divided by the number of recommendations a user sees

- The higher the take-rate, the better the recommender system

- A higher take-rate also results in higher total streaming hours and lower subscription cancellation rates

## A/B Testing  

- Use experiments to learn how ML metrics influence business metrics

- A/B testing to choose the model that leads to better business metrics 

- Regardless of whether this model has better ML metrics.

## ML maturity stage


![](images/lec-02/fig-2-1-time-to-production.png)



- How long it takes for a company to bring a model to production is proportional to how long it has used ML. Source: Adapted from an image by Algorithmia

::: {.notes}
Returns on investment in ML depend a lot on the maturity stage of adoption. The longer you’ve adopted ML, the more efficient your pipeline will run, the faster your development cycle will be, the less engineering time you’ll need, and the lower your cloud bills will be, which all lead to higher returns. According to a 2020 survey by Algorithmia, among companies that are more sophisticated in their ML adoption
(having had models in production for over five years), almost 75% can deploy a model in under 30 days. Among those just getting started with their ML pipeline, 60% take over 30 days to deploy a model 
:::

# Requirements for ML Systems {background-color="#0ca37f"}

## Reliability


- The system should continue to perform the correct function at the desired level of performance even in the face of adversity (hardware or software faults, and even human error)

- ML systems can fail silently


## Scalability

- Ways an ML system can grow:

  - Complexity (more complex models)

  - Traffic volume (served predictions per day)

  - ML model count (# of models)

## Scalability

- Resource scaling
  - Up-scaling (expanding the resources to handle growth) 
  - Down-scaling (reducing the resources when not needed)
  - Auto-scaling: automatically scaling up and down the number of machines depending on usage.

- *Amazon's autoscaling feature failed on Prime Day (2018), causing their system to crash. An hour of downtime was estimated to cost Amazon between $72 million and $99 million.*

- Artifact management (model monitoring and retraining)


## Maintainability

- Code should be documented 

- Code, data, and artifacts should be versioned. 

- Models should be sufficiently reproducible 

## Adaptibility

- Adapt to shifting data distributions and business requirements

- Capacity for performance improvement

- Allowing updates without service interruption


# Iterative process {background-color="#0ca37f"}

## Iterative process

- Developing an ML system is an iterative (never-ending) process.

- Once a system is put into production, it’ll need to be continually monitored and
updated.

- Example: Building an ML model to predict whether an ad should be shown when users enter a search query


## Iterative process workflow example {.scrollable}

- 1. Choose a metric to optimize (e.g. impressions)
- 2. Collect data and obtain labels
- 3. Engineer features
- 4. Train models
- 5. Error analysis (e.g., wrong labels -> relabel data)
- 6. Train the model again
- 7. Error analysis (e.g., data imbalance -> collect more data)
- 8. Train the model again
- 9. Model performs poorly on newer data -> update it on more recent data
-  10. Train the model again
-  11. Deploy the model
-  12. Model seems to be performing well, but revenue is decreasing -> change your model to optimize for ad click-through rate instead.
-  13. Go to step 1.


## Iterative process


![](images/lec-02/fig-2-2-process.png)


- Oversimplified representation of what the iterative process for developing ML systems in production looks like from the perspective of a data scientist or an ML engineer.


## Step 1: Project scoping

- Identify and involve stakeholders. 

- Define goals, objectives, and constraints. 

- Estimate and allocate resources 

- Organize teams 

## Step 2: Data engineering

- Access to raw data

- Handling data from different sources and formats.

- Curate training data

- Sampling and generating labels


## Step 3: ML Model development

- Feature engineering

- Model training and selection

- Model evaluation


## Step 4: Model deployment

- Make model accessible to users



## Step 5: Monitoring and continual learning

- Monitoring for performance decay 

- Maintained to be adaptive to changing environments and changing requirements

## Step 6: Business analysis

- Evaluate model performance against business goals 

- Eliminate unproductive projects or scope out new projects. 

- This step is closely related to the first step



# Framing ML Problems {background-color="#0ca37f"}

## Types of ML Tasks

![](images/lec-02/fig-2-3-ml-types.png)

## Classification versus regression

- Classification models classify inputs into different categories

- Regression models output a continuous value


## Classification versus regression


![](images/lec-02/fig-2-4-cl-reg.png)



- A regression model can be framed as a classification model and vice versa (if we transform the data)


## Binary versus multiclass classification

- Binary
  - Only two possible classes

- Multiclass classification
  - More than two classes

- High cardinality
  - Number of classes is high

- Hierarchical classifiaction

## Multiclass versus multilabel classification

- Binary and multiclass classification 
  - Example belongs to one class

- Multilabel classification problem
  - Example can belong to multiple classes

## Multiple ways to frame a problem


![](images/lec-02/fig-2-5-app.png)

::: {.notes}

This is a bad approach because whenever a new app is added, you might have to retrain your model from scratch, or at least retrain all the components of your model whose number of parameters depends on N
:::

## Multiple ways to frame a problem

![](images/lec-02/fig-2-6-app.png)


::: {.notes}

In this new framing, whenever there’s a new app you want to consider recommending to a user, you simply need to use new inputs with this new app’s feature instead of having to retrain your model or part of your model from scratch.
:::

## Objective Functions

*To learn, an ML model needs an objective (loss) function to guide the learning process*

- Regression
  - Means squared error (MSE)
  - Root mean squared error (RMSE)
  - Mean absolute error (MAE)

- Classification
  - Logistic loss (log loss) for binary classification
  - Cross entropy for multiclass classification

## Decoupling objectives

- Example: Build a system to rank items on users’ newsfeeds

- Original goal: aximize users’ engagement
 
 - You want to achieve this goal through the following three objectives:
  - 1. Filter out spam
  - 2. Filter out NSFW content
  - 3. Rank posts by engagement: how likely users will click on it

## Decoupling objectives

- Ethical concerns 
  - Extreme posts tend to get more engagements
  - Algorithm learned to prioritize extreme content


## Decoupling objectives

- New goal:
  - Maximize users’ engagement 
  - While minimizing the spread of extreme views and misinformation

- New objectives:
  - 1. Filter out spam
  - 2. Filter out NSFW content
  - 3. Filter out misinformation
  - 4. Rank posts by quality
  - 5. Rank posts by engagement: how likely users will click on it


:::{.notes}
Two objectives are in conflict with each other. If a post is engaging but it’s of questionable quality, should that post rank high or low?
:::

## Decoupling objectives  


- Rank posts by quality
  - Minimize "quality loss"

- Rank posts by engagement
  - Predict the number of clicks each post will get
  - Minimize "engagement loss"

## Decoupling objectives  

Possible solution: Train one model

$$loss = \alpha (quality_{loss}) + \beta (engagement_{loss}) $$

::: {.callout-warning}
## Warning
This is not a good idea
:::


:::{.notes}
A problem with this approach is that each time you tune α and β—for example, if the quality of your users’ newsfeeds goes up but users’ engagement goes down, you might want to decrease α and increase β—you’ll have to retrain your model.
:::

## Decoupling objectives  

Better solution: Train two different models

$$\alpha (quality_{score}) + \beta (engagement_{score}) $$

- Quality model
  - Minimizes quality_loss and outputs the predicted quality of each post

- Engagement Model
  - Minimizes engagement_loss and outputs the predicted number of clicks of each post

- Combine the models’ outputs and rank posts by their combined scores

:::{.notes}
Now you can tweak α and β without retraining your models!
:::

## Decoupling objectives  

- Multiple objectives 
  - Decouple them

- Makes model development and maintenance easier. 

- Easier to tweak your system without retraining models

- Easier for maintenance (e.g., different maintenance schedules)


## Mind versus Data

- Mind
  - Intelligent architectural designs

- Data
  - Computation

- Success of an ML system depends largely on:
  - the quality and quantity of data it was trained on

## Data science hierarchy of needs

![](images/lec-02/fig-2-7-needs.png)


Source: Adapted from an image by Monica Rogati


## The size of the datasets

![](images/lec-02/fig-2-8-data.png)


## Summary 

- Start with business objectives
  - Translate into ML objectives 

- General requirements:
  - reliability, scalability, maintainability, and adaptability

- Iterative process

- Role of data in ML Systems