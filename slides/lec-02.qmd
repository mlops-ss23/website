---
title: Introduction to ML Systems Design
subtitle: Lecture 2
author: Jan Kirenz
format:
  revealjs:
    theme: default
    transition: fade
    slide-number: true
    chalkboard:
      buttons: false
    preview-links: auto
    logo: images/logo.png
    css: slides.scss
    footer: MLOps | Jan Kirenz
    incremental: true 
#jupyter: python3
---


# Business and ML Objectives {background-color="#0ca37f"}


## Business and ML Objectives

- Goal of any project is to increase profits

  - **Directly**: Increasing sales and cutting costs

  - **Indirectly**: e.g., higher customer satisfaction and increasing traffic on a website

- Tie the performance of an ML system to the overall business performance


## E Commerce example

- E commerce site that cares about purchase-through rate

- You want to move your recommender system from batch prediction to online prediction



::: {.notes}
E commerce site that cares about purchase-through rate and you want to move your recommender system from batch prediction to online prediction. You might reason that online prediction will enable recommendations
more relevant to users right now, which can lead to a higher purchase-through rate.
You can even do an experiment to show that online prediction can improve your
recommender system’s predictive accuracy by X% and, historically on your site, each
percent increase in the recommender system’s predictive accuracy led to a certain
increase in purchase-through rate.
:::

## Netflix Recommender example

- Business metric: subscription cancellation rate

- Metric: Total streaming hours

- Netflix measures the performance of their recommender system using take-rate: the number of quality plays divided by the number of recommendations a user sees

- The higher the take-rate, the better the recommender system

- A higher take-rate also results in higher total streaming hours and lower subscription cancellation rates

## A/B Testing  

- Use experiments to learn how ML metrics influence business metrics

- A/B testing to choose the model that leads to better business metrics 

- Regardless of whether this model has better ML metrics.

## ML maturity stage


![](images/lec-02/fig-2-1-time-to-production.png)



- How long it takes for a company to bring a model to production is proportional to how long it has used ML. Source: Adapted from an image by Algorithmia

::: {note}
Returns on investment in ML depend a lot on the maturity stage of adoption. The longer you’ve adopted ML, the more efficient your pipeline will run, the faster your development cycle will be, the less engineering time you’ll need, and the lower your cloud bills will be, which all lead to higher returns. According to a 2020 survey by Algorithmia, among companies that are more sophisticated in their ML adoption
(having had models in production for over five years), almost 75% can deploy a model in under 30 days. Among those just getting started with their ML pipeline, 60% take over 30 days to deploy a model 
:::

# Requirements for ML Systems {background-color="#0ca37f"}

## Reliability


- The system should continue to perform the correct function at the desired level of performance even in the face of adversity (hardware or software faults, and even human error)

- ML systems can fail silently


## Scalability

- Ways an ML system can grow:

  - Complexity (more complex models)

  - Traffic volume (served predictions per day)

  - ML model count (# of models)

## Scalability

- Resource scaling
  - Up-scaling (expanding the resources to handle growth) 
  - Down-scaling (reducing the resources when not needed)
  - Auto-scaling: automatically scaling up and down the number of machines depending on usage.

- *Amazon's autoscaling feature failed on Prime Day (2018), causing their system to crash. An hour of downtime was estimated to cost Amazon between $72 million and $99 million.*

- Artifact management (model monitoring and retraining)


## Maintainability

- Code should be documented 

- Code, data, and artifacts should be versioned. 

- Models should be sufficiently reproducible 

## Adaptibility

- Adapt to shifting data distributions and business requirements

- Capacity for performance improvement

- Allowing updates without service interruption


## Iterative process

- Developing an ML system is an iterative (never-ending) process.

- Once a system is put into production, it’ll need to be continually monitored and
updated.

- Example: Building an ML model to predict whether an ad should be shown when users enter a search query


## Iterative process workflow example {.scrollable}

- 1. Choose a metric to optimize (e.g. impressions)
- 2. Collect data and obtain labels
- 3. Engineer features
- 4. Train models
- 5. Error analysis (e.g., wrong labels -> relabel data)
- 6. Train the model again
- 7. Error analysis (e.g., data imbalance -> collect more data)
- 8. Train the model again
- 9. Model performs poorly on newer data -> update it on more recent data
-  10. Train the model again
-  11. Deploy the model
-  12. Model seems to be performing well, but revenue is decreasing -> change your model to optimize for ad click-through rate instead.
-  13. Go to step 1.